@namespace TodoApp.Components

@using TodoApp.Data
@using TodoApp.Data.Sorting
@using System.ComponentModel
@using System.Linq.Expressions

@inject ITodoService TodoService

@if (todoItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    // Done list
    <table class="table table-sm">
        <thead>
            <tr>
                <TodoHeader ColumnHeader="Created" Column="TodoItemSortOrder.Created" SortAsync="SortAsync" CurrentSort="CurrentSort" />
                <TodoHeader Column="TodoItemSortOrder.Title" SortAsync="SortAsync" CurrentSort="CurrentSort" />
                <TodoHeader ColumnHeader="Due" Column="TodoItemSortOrder.Due" SortAsync="SortAsync" CurrentSort="CurrentSort" />
                <TodoHeader Column="TodoItemSortOrder.Done" SortAsync="SortAsync" CurrentSort="CurrentSort" />
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todoItems)
            {
                <Todo Item="todo" RefreshParent="RefreshListAsync" />
            }
            <tr>
                <td class="row justify-content-center">
                    <label class="btn btn-outline-primary" for="new-todo-item">
                        <span class="oi oi-plus"></span>
                    </label>
                </td>
                <td>
                    <input id="new-todo-item" type="text" class="form-control"
                           placeholder="New to-do item"
                           @bind="newTodoTitle"
                           @onfocusout="OnNewItem"
                           @onkeyup="OnKeyUp" />
                </td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Expression<Func<TodoItem, bool>> ListFilter { get; set; }

    private (TodoItemSortOrder Column, ListSortDirection Direction) CurrentSort = (TodoItemSortOrder.Id, ListSortDirection.Ascending);

    private List<TodoItem> todoItems;

    private string newTodoTitle = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshListAsync();
    }

    public async Task SortAsync(TodoItemSortOrder column)
    {
        CurrentSort = CurrentSort.GetNewSortOrder(column);
        await RefreshListAsync();
    }

    private async Task RefreshListAsync()
    {
        todoItems = await TodoService.GetTodoItemsAsync(ListFilter, CurrentSort);
        StateHasChanged();
    }

    private async Task OnNewItem()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var newItem = new TodoItem()
            {
                Title = newTodoTitle
            };

            todoItems.Add(newItem);
            await TodoService.AddTodoItemAsync(newItem);
            newTodoTitle = "";
        }
    }

    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnNewItem();
        }
    }
}
